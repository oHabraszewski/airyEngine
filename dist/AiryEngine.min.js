class Entity{constructor(x=0,y=0,sprite=null){console.log(this);this.x=x;this.y=y;this.scale={x:1,y:1};this.pivot={x:0,y:0};this.velocity={ideal:0,x:0,y:0};this.friction=0;this.rotation=0;if(sprite==null){console.warn("You did not enter the Sprite variable so I set the default \uD83D\uDE01");this.sprite=new Sprite("./","default.png")}else{this.sprite=sprite}this.w=this.sprite.img.w;this.h=this.sprite.img.h}move(fps){if(this.toPoint!=undefined){const px=this.toPoint.px;const py=this.toPoint.py;const max=Math.max(Math.abs(px-this.cx),Math.abs(py-this.cy));const min=Math.min(Math.abs(px-this.cx),Math.abs(py-this.cy));const relation=Math.abs(min/max);let f1=1,f2=1;if(px-this.cx<0){f1=-1}if(py-this.cy<0){f2=-1}if(Math.abs(px-this.cx)>Math.abs(py-this.cy)){this.setVelocity(f1*this.velocity.ideal,f2*this.velocity.ideal*relation,false)}else{this.setVelocity(f1*this.velocity.ideal*relation,f2*this.velocity.ideal,false)}this.toPoint=undefined}let toAddX,toAddY;if(this.velocity.x>0){toAddX=-this.friction}else if(this.velocity.x<0){toAddX=this.friction}else{toAddX=0}if(this.velocity.y>0){toAddY=-this.friction}else if(this.velocity.y<0){toAddY=this.friction}else{toAddY=0}this.x+=this.velocity.x/fps+toAddX/fps;this.y+=this.velocity.y/fps+toAddY/fps}draw(context=null,camera){if(context!=null&&camera!=undefined){this.cx=this.x-camera.x+camera.w/2;this.cy=this.y-camera.y+camera.h/2;context.save();context.translate(this.cx+this.pivot.x,this.cy+this.pivot.y);context.rotate(this.rotation);context.drawImage(this.sprite.img,-this.pivot.x,-this.pivot.y,this.sprite.w*this.scale.x,this.sprite.h*this.scale.y);context.restore()}else{console.error("Entity was not added to the layer!")}}delete(){if(this.layer!=undefined){this.layer.delete(this)}else{console.error("Entity was not added to the layer, so it can not be removed!")}}rotateToMouse(e){const targetX=e.pageX-(this.cx+this.pivot.x);const targetY=e.pageY-(this.cy+this.pivot.y);const rotation=Math.atan2(targetY,targetX);this.rotation=rotation}moveToPoint(px,py){this.toPoint={px:px,py:py}}set isRotatingToMouse(is=false){if(is){window.addEventListener("mousemove",e=>{this.rotateToMouse(e)})}}set scaleX(scale=1){this.scale.x=scale}set scaleY(scale=1){this.scale.y=scale}set pivotX(pivot=0){this.pivot.x=pivot}set pivotY(pivot=0){this.pivot.y=pivot}set velocityX(velocity=0){this.velocity.x=velocity}set velocityY(velocity=0){this.velocity.y=velocity}setScale(x=0,y=null){this.scale.x=x;if(y==null){this.scale.y=x}else{this.scale.y=y}}setPivot(x=0,y=null){this.pivot.x=x;if(y==null){this.pivot.y=x}else{this.pivot.y=y}}setVelocity(x=0,y=null,is=true){if(is){this.velocity.ideal=x}this.velocity.x=x;if(y==null){this.velocity.y=x}else{this.velocity.y=y}}setFriction(friction=0){this.friction=friction}}export default Entity;
class Game{constructor(width=2000,height=2000,create=()=>{},update=()=>{},fps=30,root=null){this.w=width;this.h=height;this.fps=fps;this.layers=[];this.create=create;this.update=update;if(root==null){this.root=document.body}else{this.root=root}this.clock=setInterval(()=>{this.update();this.follow();this.layers.forEach(layer=>{layer.drawEntities();layer.collideEntities()})},1000/this.fps);this.screen={w:window.innerWidth,h:window.innerHeight};this.camera={x:this.screen.w/2,y:this.screen.h/2,w:this.screen.w,h:this.screen.h,follow:false}}add(layer){this.canvas=document.createElement("canvas");this.canvas.setAttribute("width",this.w);this.canvas.setAttribute("height",this.h);this.root.appendChild(this.canvas);this.layers.push(layer);layer.initialize(this.layers.length-1,this.canvas,this.w,this.h,this.fps,this.camera)}follow(){console.log(this.camera);if(this.camera.follow.x-this.camera.w/2>0){if(this.camera.follow.x+this.camera.w/2<this.w){this.camera.x=this.camera.follow.x}}if(this.camera.follow.y-this.camera.h/2>0){if(this.camera.follow.y+this.camera.h/2<this.h){this.camera.y=this.camera.follow.y}}}cameraFollow(entity){this.camera.follow=entity}}export default Game;
class Layer{constructor(){this.entities=[];this.toCollide=[]}add(entity){entity.layer=this;this.entities.push(entity)}delete(entity){for(let i=0;i<this.entities.length;i++){if(this.entities[i]=entity){this.entities.splice(i,1)}}}drawEntities(){this.ctx.clearRect(0,0,this.camera.w,this.camera.h);this.entities.forEach(entity=>{entity.move(this.fps);entity.draw(this.ctx,this.camera)})}collideEntities(){if(this.toCollide.length>0){for(let i=0;i<this.toCollide.length;i++){const collideElem=this.toCollide[i];for(let j=0;j<this.entities.length;j++){const entityFromOne=this.entities[j];if(entityFromOne==collideElem.fstEntity||entityFromOne==collideElem.sndEntity){if(entityFromOne==collideElem.sndEntity){const forOneMoment=collideElem.fstEntity;collideElem.fstEntity=collideElem.sndEntity;collideElem.sndEntity=forOneMoment}for(let k=0;k<this.entities.length;k++){const entityFromTwo=this.entities[k];if(entityFromTwo==collideElem.sndEntity){const fx=collideElem.fstEntity.x,fy=collideElem.fstEntity.y,fw=collideElem.fstEntity.sprite.w,fh=collideElem.fstEntity.sprite.h;const sx=collideElem.sndEntity.x,sy=collideElem.sndEntity.y,sw=collideElem.sndEntity.sprite.w,sh=collideElem.sndEntity.sprite.h;const minX=Math.min(fx,sx),minY=Math.min(fy,sy),maxX=Math.max(fx+fw,sx+sw),maxY=Math.max(fy+fh,sy+sh);if(maxX-minX<fw+sw&&maxY-minY<fh+sh){collideElem.functionToDo(collideElem.fstEntity,collideElem.sndEntity)}break}}break}}}}}checkCollision(fstEntity,sndEntity,functionToDo){for(let i=0;i<this.entities.length;i++){const oneEntity=this.entities[i];console.log("i:"+i+"lenght:"+this.entities.length);if(oneEntity==fstEntity){for(let j=0;j<this.entities.length;j++){const twoEntity=this.entities[j];if(twoEntity==sndEntity){this.toCollide.push({fstEntity:fstEntity,sndEntity:sndEntity,functionToDo:functionToDo});break}else if(j+1==this.entities.length){console.error("Second entity to collide not finded in layer's entities!")}}break}else if(i+1==this.entities.length){console.error("First entity to collide not finded in layer's entities!")}}}initialize(no,canvas,width,height,fps,camera){this.w=width;this.h=height;this.no=no;this.fps=fps;this.ctx=canvas.getContext("2d");this.camera=camera}}export default Layer;
class Sprite{constructor(src="/",fileName=""){this.src=src;this.fileName=fileName;this.img=new Image;this.img.src=this.src+fileName;this.w=this.img.width;this.h=this.img.height}}export default Sprite;
class Text{constructor(x=0,y=0,size=16,text="You Only Live Once",color="#000",fontFamily="arial"){this.x=x,this.y=y,this.s=size,this.text=text,this.color=color,this.fFam=fontFamily}draw(context){context.fillStyle=this.color;context.font=this.s+"px '"+this.fFam+"'";context.fillText(this.text,this.x,this.y)}move(){}}export default Text;
